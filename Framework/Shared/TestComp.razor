@namespace Framework.TestComp

@using Framework.Minigames

@using Framework.Keyboard

@inject KeyboardService KeyboardService

@* <div id="test">

</div> *@


<<<<<<< HEAD
@* <Minigame MinigameDefClass="Framework.Minigames.MiniTest" OnFinished="((success) => Console.WriteLine(success))" /> *@
@* <Minigame MinigameDefClass="Framework.Minigames.KillTest" OnFinished="((success) => Console.WriteLine(success))" /> *@
@* <Minigame MinigameDefClass="Framework.Minigames.MinigameDefClasses.MyMinigame" OnFinished="((success) => Console.WriteLine(success))" /> *@
=======
 @*<Minigame MinigameDefClass="Framework.Minigames.MiniTest" OnFinished="((success) => Console.WriteLine(success))" /> *@
<!-- <Minigame MinigameDefClass="Framework.Minigames.KillTest" OnFinished="((success) => Console.WriteLine(success))" /> -->
 @*<Minigame MinigameDefClass="Framework.Minigames.MinigameDefClasses.MyMinigame" OnFinished="((success) => Console.WriteLine(success))" /> *@
<Minigame MinigameDefClass="Framework.Minigames.MinigameDefClasses.MyMinigame1" OnFinished="((success) => Console.WriteLine(success))" />
>>>>>>> 9395ebd07591b89ef64612282ae3ab9860ad00ac

@* <button @onclick=isDown>@isDownRes</button> *@

@* Note to self: MarkupString can't have blazor stuff *@
@* @((MarkupString)Markup)) *@

@code {

    @* private int counter = 0;
    
    private void Increment() {

        counter++;
    }

    private string Markup = "<button @onclick=\"Increment\">@counter</button>"; *@

    @* private bool isDownRes = false;

    private void isDown() {
        isDownRes = KeyboardService.GetKeyState("KeyA");
    }

    protected override void OnInitialized() {
    KeyboardService.OnKeyDown += (sender, e) => {
        Console.WriteLine("Key down");
    };
    KeyboardService.OnKeyUp += (sender, e) => {
        Console.WriteLine("Key up");
    };
    } *@
} 