@page "/inventory"

@inject HttpClient HttpClient

<PageTitle>Inventory Test</PageTitle>

<h1>Test Inventory</h1>

<p>This component demonstrates the Inventory overlay.</p>

@using InventoryItems

<div class="overlay @OverlayClass" style="display: block">
    <div class="overlay-content">
        
        @if (image != null)
        {
            <div class="image-row">
                @* @foreach (var img in images)
                {
                    <img src="@img" alt="hello" />
                } *@
                <img src="@image" alt="hello" />
            </div>
        }
        else {
           
            Console.WriteLine("Error in Blazor, Inventory Images");
        }
        
        @ChildContent
    </div>
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string OverlayClass { get; set; } = "custom-overlay";

    private Items itemsObj = null!;
    private string? image;
    
    Item? OneItem;
    private string overlayDisplay = "block";
    private bool isOverlayVisible = true;

    protected override async Task OnInitializedAsync()
    {
        itemsObj = new Items(HttpClient);
        Console.WriteLine("image before LoadImagesAsync");
        Console.WriteLine(image);
        OneItem = await LoadImagesAsync();
        Console.WriteLine(OneItem);
        image = OneItem.Image;
        Console.WriteLine("image after");

        Console.WriteLine(image);
        
        await InvokeAsync(StateHasChanged);
        Console.WriteLine("State has changed");


    }

    private async Task<Item> LoadImagesAsync()
    {   
        await itemsObj.LoadItemsAsync();
        //ItemsObj.LoadItemsAsync();
        // Load images data asynchronously
        return await Task.Run(() => itemsObj.GetPropertiesByName("goldkey"));
    }

    private void ToggleOverlay()
    {
        isOverlayVisible = !isOverlayVisible;
        overlayDisplay = isOverlayVisible ? "block" : "none";
    }
}
